#!/bin/bash
# shellcheck disable=SC1091
# Print out debug messages to help in diagnosing performance issues
# with this Bash file
export PROFILE_DEBUG=0

# Make ** recursive in shell expressions
shopt -s globstar ||:

# Needed to display colors properly in tmux/vim context
export TERM="xterm-256color"

export LANG="en_US.UTF-8"
export LC_COLLATE="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export LC_MESSAGES="en_US.UTF-8"
export LC_MONETARY="en_US.UTF-8"
export LC_NUMERIC="en_US.UTF-8"
export LC_TIME="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

export DOTFILES=$HOME/.dotfiles
# don't put duplicate lines in the history. See bash(1) for more options
export HISTCONTROL=ignoredups
export HISTFILESIZE=999999
export HISTSIZE=999999

export GYP_GENERATORS=ninja
export GYP_DEFINES=target_arch=x64

# do not export cdpath, since it could break logic in other shell scripts
CDPATH=.:~/dev:~/dev/client-desktop

export MOTD="fortune"

# for zelda python scripts that are buggy on VPN
export USE_URLLIB2=1
export USE_CCACHE=1

export GOPATH="$HOME/go"

export NODE_VERSION="9.10.0"
export NVM_DIR="$HOME/.nvm"

hostname=$(hostname)
PROMPT_COMMAND='__git_ps1 "\[\033[01;32m\]\u@$hostname\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[01;33m\]" "\[\033[00m\]\n\\\$ "'
if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi

ssh-init() {
  eval "$(ssh-agent)"
  if [ -z "$SSH_KEY" ]; then
    echo "SSH_KEY not defined. Set this to a private key file to add it to ssh agent" >&2
    return
  fi
  if ! ssh-add -l | grep "$SSH_KEY" &>/dev/null; then
    ssh-add "$SSH_KEY"
  else
    echo "Key already registered in ssh agent: $SSH_KEY" >&2
  fi
}

nvm-init() {
  if  [[ -f /usr/local/opt/nvm/nvm.sh ]]; then
    source /usr/local/opt/nvm/nvm.sh
    if type nvm &>/dev/null; then 
      nvm use "$NODE_VERSION" &>/dev/null
    fi
  fi
}

debug() {
  if [[ "$PROFILE_DEBUG" == "1" ]]; then
    echo "$@" >&2
  fi
}

CLIENT_ZELDA_NODE_VERSION="6.8.1"

use-client-zelda-nodejs() {
  if ! type nvm &>/dev/null; then
    nvm-init
  fi
  if [[ $(node --version) != "$CLIENT_ZELDA_NODE_VERSION" ]]; then
    nvm use $CLIENT_ZELDA_NODE_VERSION
  fi
}

DOCKER_MACHINE=default
use-docker-machine() {
  if type docker-machine &>/dev/null; then
    if ! docker-machine env "$DOCKER_MACHINE"; then
      docker-machine start "$DOCKER_MACHINE"
    fi
    eval "$(docker-machine env "$DOCKER_MACHINE")"
  fi
}
use-docker-native() {
  unset DOCKER_HOST
}
alias docker-env=use-docker-machine
alias ..='cd ..'

SSH_ENV="$HOME/.ssh/environment"

start_agent () {
  echo "Initialising new SSH agent..."
  /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
  echo succeeded
  chmod 600 "${SSH_ENV}"
  . "${SSH_ENV}" > /dev/null
  /usr/bin/ssh-add;
}
# Source SSH settings, if applicable
ssh-agent-check() {
  if [ -f "${SSH_ENV}" ]; then
      . "${SSH_ENV}" > /dev/null
      {
        pid=$(pgrep ssh-agent)
        if [ -z "$pid" ]; then
            start_agent;
        fi
      } &
      disown
  else
      start_agent;
  fi
}

try_source() {
  local src="$1"
  [[ -f "$src" ]] && source "$src"
}

try_source /usr/local/etc/bash_completion.d/password-store

debug Loading Git Prompt/Completion
[[ -f ~/.git-prompt.sh ]] && source ~/.git-prompt.sh
[[ -f ~/.git-completion.bash ]] && source ~/.git-completion.bash
debug Loading Mvn Completion
[[ -f ~/.maven-completion.bash ]] && source ~/.maven-completion.bash

#PS1="\[\033[01;32m\]\u@$hostname\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\] $(__git_ps1 " (%s)")\n\$ "
#unset PS1

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow --glob "!.git/*"'


#Specify the terminal type
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

set -o vi

# Returns true if the given cache file exists and has
# been modified within the given ttl window
ttl-file () {
  local ttl="$1"
  local file="$2"
  [[ -f "$file" ]] || return 1
  [[ -n "$NOCACHE" ]] && return 1
  [[ "$ttl" == "0" ]] && return 0
  local mtime
  mtime=$(stat -f %m "$file" 2>/dev/null)
  [[ -n "$mtime" ]] || return 2
  local epoch
  epoch=$(date +%s)
  ((epoch - mtime <= ttl)) && return 0
  return 3
}

memoize-ttl() {
  local ttl="$1"
  local name="$2"
  local cmd="$3"
  mkdir -p "$HOME/.memoized"
  local fname="$HOME/.memoized/$name"
  if ! ttl-file "$ttl" "$fname"; then
    echo "evaluating $cmd" >&2
    eval "$cmd" > "${fname}.tmp" && mv "${fname}.tmp" "${fname}"
  fi
  [[ -f "$fname" ]] && cat "$fname"
}

addpath() {
    if [ "$1" = "" ] ; then
        echo "usage: addpath <path> [after]"
    elif ! echo "$PATH" | grep -E -q "(^|:)$1($|:)" ; then
        if [ "$2" = "after" ] ; then
            PATH=$PATH:$1
        else
            PATH=$1:$PATH
        fi
    fi
}
export addpath

debug Setting up Paths
PATH="/usr/bin:/bin"

addpath /usr/local/share/npm/bin

_osx_wifi_join() {
  local ssid="$1"
  local pass="$2"
  networksetup -setairportnetwork en0 "$ssid" "$pass"
}

if [ "$(uname)" == 'Darwin' ]; then
  alias wifi-off="networksetup -setairportpower en0 off"
  alias wifi-on="networksetup -setairportpower en0 on"
  alias wifi-scan="/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport scan"
  alias wifi-hw="networksetup -listallhardwareports"
  alias wifi-join=_osx_wifi_join

  alias osx-dock-keep-hidden="defaults write com.apple.dock autohide-delay -float 2; killall Dock"

#   addpath /usr/local/Cellar/python/2.7.5/bin
  # ensure local bin is before /usr/bin
alias virtualenv="python /usr/local/lib/python2.7/site-packages/virtualenv.py"
addpath /usr/local/bin


elif [ "$(uname) $(uname -i)" == 'Linux x86_64' ]; then
  addpath ~/.dotfiles/bin-linux-x86_64
fi


# Haskell stuff, using stack environments to provide local
# package contexts
_ghci() {
  # Use local stack environment if available
  if [[ -f stack.yaml ]]; then
    stack ghci --verbosity silent
    return 0
  fi

  # Use standard dev environment
  if [[ ! -d ~/dev/haskell ]]; then
    mkdir -p ~/dev/haskell
    (
      cd ~/dev/haskell || exit
      stack new simple
      stack init
    )
  fi
  (
    cd ~/dev/haskell || exit
    stack ghci --verbosity silent
  )
  return 0
}

if type stack &>/dev/null; then
  alias ghc='stack ghc --verbosity silent -- '
  alias ghci='_ghci '
fi

debug "Setting up Paths (2)"
addpath /opt/local/bin
addpath /opt/local/sbin
addpath /sbin
addpath /usr/sbin
addpath /usr/local/sbin
addpath "$DOTFILES/bin"
addpath "$HOME/dev/stitch-tools/unrequire/bin"
addpath "$HOME/dev/gh-tools/"
addpath "$GOPATH/bin"
addpath "$HOME/.nvm/versions/node/v$NODE_VERSION/bin"
addpath "$HOME/dev/android-platform-tools"
addpath "$HOME/.bpkg/bin"
addpath "$HOME/bin"
addpath "$HOME/dev/nota-bene"
addpath /usr/local/Cellar/ruby22/2.2.4/bin/
addpath /usr/local/lib/ruby/gems/2.2.0/bin/
addpath /usr/local/Cellar/python/2.7.14/bin
addpath /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin
addpath ./node_modules/.bin


addpath ~/.vulcan/cache/clang-format-4.0.0-osx.tar.gz-b614ca1a81fc263f8d6e9f6156ed7a91d624a4e8/extracted/

# Google Cloud SDK
debug Google Cloud SDK
[[ -f ~/dev/google-cloud-sdk/path.bash.inc ]] && source ~/dev/google-cloud-sdk/path.bash.inc;
[[ -f ~/dev/google-cloud-sdk/completion ]] && source ~/dev/google-cloud-sdk/completion.bash.inc;

if type nb &>/dev/null; then
  eval "$(nb --env)"
fi

set-launchctl () {
  local env="$1"
  if type launchctl &>/dev/null; then
    eval "launchctl setenv $env \"\$env\"" 2>/dev/null
  fi
}
set-launchctl PATH
set-launchctl ANDROID_HOME
set-launchctl ANDROID_NDK

use-ccache() {
  if type brew &>/dev/null; then
    local libexec
    libexec=$(memoize-ttl 0 brew-prefix-ccache "brew --prefix ccache" 2>/dev/null)/libexec
    debug "libexec=$libexec"
    if [[ -d "$libexec" ]]; then
      addpath "$libexec"
      if [[ -x "$libexec/clang" ]]; then
        export CC="$libexec/clang"
        set-launchctl CC
      fi
      if [[ -x "$libexec/clang++" ]]; then
        export CXX="$libexec/clang++"
        set-launchctl CXX
      fi
    fi
  fi
}


#debug Using CCache
#use-ccache

#export CXX="/usr/bin/clang++"
#export CC="/usr/bin/clang"

export SBT_OPTS="-Xmx2G -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=2G -Xss2M  -Duser.timezone=GMT"

debug Aliases and Functions

_my-ip() {
  curl -s ifconfig.me
}
my-ip() {
  memoize-ttl 864000 myip _my-ip
}

if type -f kvstore &>/dev/null; then
  eval "$(kvstore shellinit)"
fi

alias reset-path="export PATH=/usr/bin:/bin && . ~/.profile"
alias path='echo -e ${PATH//:/\\n}'
fork() {
  "$@" &>/dev/null </dev/null &
}


if [ -z "$JAVA_HOME" ] && [ -x /usr/libexec/java_home ]; then
  export JAVA_HOME
  JAVA_HOME=$(/usr/libexec/java_home)
fi
use-java() {
  local version="$1"
  export JAVA_HOME
  JAVA_HOME=$(/usr/libexec/java_home -v "1.$version")
}
use-protoc-1-4() {
  ln -fs /usr/local/Cellar/protobuf241/2.4.1/bin/protoc /usr/local/bin/protoc
}
use-protoc-1-5() {
  ln -fs /usr/local/Cellar/protobuf/2.5.0/bin/protoc /usr/local/bin/protoc
}
use-maven-3() {
  ln -fs /usr/local/Cellar/maven31/3.1.1/bin/mvn /usr/local/bin/mvn
}
use-maven-2() {
  ln -fs /usr/local/Cellar/maven2/2.2.1/bin/mvn /usr/local/bin/mvn
}

alias mvn-public="mvn -s ~/.m2/settings-public.xml "
alias mvn-new-project="mvn archetype:generate -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=true"

export PAGER="less"
export LESS="-i -M -x4 -X -R"

export CCACHE_CPP2=1
export CCACHE_COMPRESS=1
#export CCACHE_NODIRECT=1

export HOMEBREW_GITHUB_API_TOKEN="255ec33c1b85686fb9a9be690e457245266280ae"
if [ -f "/etc/bash_completion.d/git-completion.bash" ]; then
    . /etc/bash_completion.d/git-completion.bash
fi

alias date="date -u"
alias dt="date +%Y-%m-%d"
alias dtms="date +%Y-%m-%d_%H-%M-%S"

alias sudo="sudo "

export PITANODE="li1746-15.members.linode.com"
alias jump-pitanode="ssh -A \$PITANODE"

if [ "$(uname)" == 'Darwin' ]
then
    # Mac
    alias ls="ls -G"
    alias psa="ps aux"
else
    # Linux
    alias ls="ls --color=auto"
    alias psa="ps -ww -A -F"
fi

alias psp="ps -ww -F -p"
alias psg="psa | grep "

alias ps-top-cpu="ps aux | sort -nr -k 3 | head -10"
alias ps-top-mem="ps aux | sort -nr -k 4 | head -10"

alias screen-working="screen -DR working"
alias screen-remote="screen -DR remote"
alias newalias=". \$HOME/.alias"
alias newprofile="source \$HOME/.profile"

dots() {
  if [ -d ~/.dotfiles ]; then
    (
      cd ~/.dotfiles && git pull
    )
  fi
  if [ -d ~/dev/dotfiles-personal ]; then
    (
      cd ~/dev/dotfiles-personal && git pull
    )
  fi
}

#################################
# Directory and File Operations #
#################################

alias cd="cd -P"
alias cdl="cd -L"
alias permstd="chmod 755"
alias ll='ls -l'
alias lsd='ls --color=none -d */'
alias lss="ls -l -S -r -h"
alias diffonly='diff --suppress-common-lines'
alias la='ls -A'
alias l='ls -CF'
alias lt='ls -lrt'
alias lth="ls -lt | head"
alias ..="cd .."
alias ~="cd ~"

alias grep='grep --color --line-buffered'
alias space-to-tab="sed 's/\s\+/\\t/g'"
alias trailing-spaces="ag ' +$' -C 2 -G '\.(c|h|cpp|py|js|json)$'"

alias pwd="pwd -P"

alias gb="git branch"
alias gs="git status"
alias gc="git checkout"
alias gl="git log --pretty=\"format:%Cgreen%h%Creset : %Cblue[%ae] %cI%Creset %s\""
alias gll="git log --pretty=\"format:%Cgreen%H%Creset : %Cblue[%ae] %cI%Creset %s%n%b\" --name-status"
gln() {
  local n="${1:-10}"
  gl -n "$n"
}

alias gls="git log --stat"
alias glp="git log -p --decorate --color | less -R"
alias glpn="git log -p --decorate --color --name-only"
alias gsu="git submodule update --init --recursive"
alias gss="git submodule sync --recursive"
alias pass-sync="git -C ~/.password-store push"

alias load-testruns-pw="op get item ostzq3ywovh2tku5otiawv7eti | jq '.details.fields[] | select(.name==\"password\") | .value' -r | pbcopy"
alias psqltestruns="load-testruns-pw && psql -h localhost -U postgres"

unalias current-branch push pull &>/dev/null

current-branch() {
  git rev-parse --abbrev-ref HEAD
}

push() {
  git push --tags origin "$(current-branch)"
}

git-is-clean() {
  if git status | grep 'working.*clean' &>/dev/null; then
    return 0
  fi
  return 1
}

pull() {
  local current_branch
  current_branch=$(current-branch)
  local branch=${current_branch:-master}
  if git-is-clean; then
    if git remote | grep upstream &>/dev/null; then
      git fetch upstream
      git pull upstream "$branch"
    else
      git pull origin "$branch"
    fi
  else
    echo "working directory not clean!" >&2
    git status
  fi
}

rebase() {
  git checkout master && pull && git checkout - && git rebase master
}

fork-sync-master() {
  git checkout master && pull && git push origin master
}

recent-branches() {
  local num="${1:-7}"
  git for-each-ref --sort=-committerdate refs/heads/ --format '%(refname)' | cut -d/ -f3 | head "-$num"
}

clone() {
  git clone --recursive -j8 "$@"
}

alias files-revision="git show --pretty='format:' --name-only"
alias commit="git commit -a && files-revision HEAD"

alias unpack-srpm='rpm2cpio *srpm | cpio -idmv --no-absolute-filenames'
alias ripcd='cdda2wav -D 0,4,0 -B /tmp/'
alias hotfix-head='hotfix -c -rev HEAD'

alias less-mru='less $(ls -rt | tail -n 1)'

alias g="git"
alias gd="g diff --color-words --word-diff-regex='[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+'"
alias gdw="gd --color-words --word-diff-regex='[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+'"
alias gdc="g diff --cached"
alias gdwc="gdw --cached"

lessz() {
  local file=shift
  gunzip -c "$file" | less "$@"
}

perlmodversion() {
    perl -M"$1" -e "print STDOUT \$$1::VERSION"; echo
}
export perlmodversion

_pg_relation_size() {
    psql -t -c "select pg_size_pretty(pg_relation_size((SELECT oid FROM pg_class WHERE relname = '$1')))"
}
alias pg-relation-size=_pg_relation_size

_date_from_epoch() {
    for i in "$@"; do
        date -d "@$i"
    done
}
alias date-from-epoch=_date_from_epoch

find-name-matching () {
  local matchtype="$1"
  shift
  local i=0
  local cmd="find ."
  for arg in "$@"; do
    local or=""
    if (( i > 0 )); then
      or='-or'
    fi
    local matchstr=""
    if [[ "$matchtype" == "begin" ]]; then
      matchstr="$arg*"
    elif [[ "$matchtype" == "end" ]]; then
      matchstr="*$arg"
    elif [[ "$matchtype" == "any" ]]; then
      matchstr="*$arg*"
    elif [[ "$matchtype" == "exact" ]]; then
      matchstr="$arg"
    else
      echo "usage: find-name-matching <begin|end|any|exact> <word1> [<word2> ...]" >&2
      return 1
    fi
    cmd="$cmd $or $FIND_NAME_ARGS -name '$matchstr'"
    i=$((i+1))
  done
  eval "$cmd"
}
alias find-name-any="find-name-matching any"
alias find-name-begin="find-name-matching begin"
alias find-name-end="find-name-matching end"
alias find-name-exact="find-name-matching exact"
alias fn="find-name-any"

cat-like() {
  for file in $(fn "$@"); do
    if [[ -f "$file" ]]; then
      echo ">>> $file"
      cat "$file"
    fi
  done
}

git-remove-local-branch() {
    git config --unset "branch.$1.remote"
    git config --unset "branch.$1.merge"
    git branch -D "$1"
}
alias git-remove-local-branch=_git_remove_local_branch

branch-changes() {
    git diff --name-only "$(git merge-base "$1" master)..$1"
}

git-clean-all() {
  if [ "$1" == "commit" ]; then
    git clean -dffx
    git submodule foreach git clean -dffx
  else
    git clean -dffxn
    git submodule foreach git clean -dffxn
    echo "Run 'git-clean-all commit' to remove"
  fi
}
git-authors() {
  git ls-tree --name-only -z -r HEAD |xargs -0 -n1 git blame --line-porcelain|grep "^author "|sort|uniq -c|sort -nr
}

git-delete-merged-branches() {
  # shellcheck disable=SC2063
  git branch --merged | grep -v '*' | grep -v master | grep -v production | xargs -n 1 git branch -d
}

git-last-merge() {
  git show :/^Merge -q --pretty=%t
}

git-rebase-from-last-merge() {
  git rebase -i --autosquash "$(git-last-merge)"
}


alias gca="git commit --amend"

alias update-ssh-agent=". \$HOME/bin/update-ssh-agent-socket.sh"

complete-command () {
  local cmd="$1"
  local comp="$2"
  local ifs="${3:-\$'\\n'}"
  local compgen_opt="${4:--W}"
  shift
  shift
  eval "
__complete_${cmd} () {
  local cur=\"\${COMP_WORDS[\$COMP_CWORD]}\"
  local oldifs=\"\$IFS\"
  IFS=$ifs
  COMPREPLY=( \$( compgen $compgen_opt \"\$($comp)\" -- \$cur ) )
  IFS=\"\$oldifs\"
  return 0
}
complete -F __complete_${cmd} \"$cmd\"
"
}

url () {
  local key="$1"
  open "$(kvstore get url "$key")"
}
complete-command url "kvstore ls url"

url-set () {
  local key="$1"
  local url="$2"
  if [[ -z "$key" ]] || [[ -z "$url" ]]; then
    echo "usage: url-set <key> <url>" >&2
    return 1
  fi
  kvstore set url "$key" "$url"
}

meeting-room () {
  local key
  local url
  key="$(echo -n "$1")"
  url=$(kvstore get meeting-rooms "$key")
  if [[ ! -z "$url" ]]; then
    open "$url"
  else
    echo "meeting room not found: \'$key\'" >&2
    return 1
  fi
}
complete-command meeting-room "kvstore ls meeting-rooms"


alias jump-tidaleffect="ssh tidaleffect.com"

alias ssh="ssh -A "
alias rsync-sources="rsync --exclude libs --exclude .npm --exclude .node-gyp --exclude node_modules --exclude .git --exclude build "

alias simple-http-server="python -mSimpleHTTPServer"

_npm_repo(){
  npm view "$1" --json | json -a repository.url | grep -o '\(git\|https?\)://[^"\ ]\+'
}
alias npm-repo=_npm_repo

export EDITOR="vim"

vimfzf() {
  local search="$1"
  local result
  result=$(fzf --query "$search")
  if [ "$result" != "" ]; then
    vim "$result"
  fi
}
alias vf=vimfzf

alias profilecat="cat ~/.profile"
_profile_grep(){
  grep "$@" < ~/.profile
}
alias profilegrep=_profile_grep


alias vnc-start="tightvncserver -nolisten tcp -localhost -geometry 1024x786 :1"


urlencode() {
  python -c "import urllib; print urllib.quote('''$1''')"
}


cmake-build() {
  local buildtype="${1:-Ninja}"
  local dir="${2:-build}"
  shift
  shift
  if [ -n "$BUILD_DIR" ]; then
    dir="$BUILD_DIR"
  fi
  if [ -n "$CMAKE_BUILD_CLEAN" ]; then
    rm -rf "$dir"
  fi
  mkdir -p "$dir"
  (
    set -e
    set -x
    cd "$dir"
    cmake .. -G "$buildtype" -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE:-Debug}" "$@"
  )
}

export DEVELOPER_DIR="/Applications/Xcode.app/Contents/Developer"
alias symbolicatecrash=/Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework/Versions/A/Resources/symbolicatecrash

cmake-xcode() {
  cmake-build Xcode build-xcode "$@"
}
alias cmx=cmake-xcode
cmx-offline() {
  cmake-xcode -DOPTION_OFFLINE=1 "$@"
}
cmx-clean() {
  CMAKE_BUILD_CLEAN=1 cmake-xcode "$@"
}

alias cmxb='cmx && cd build && time xcodebuild -jobs 5 -target ads'

cmake-ninja() {
  cmake-build Ninja build -DUSE_ADDRESS_SANITIZER="${USE_ADDRESS_SANITIZER:-Off}" -DBUILD_ORBIT=On -DBUILD_TESTING=On "$@"
}
cmake-ninja-asan() {
  USE_ADDRESS_SANITIZER=On cmake-ninja "$@"
}
cmake-ninja-coverage() {
  CMAKE_BUILD_TYPE=Coverage cmake-ninja "$@"
}

cmn() {
  cmake-ninja "$@"
}
cmn-coverage() {
  CMAKE_BUILD_TYPE=Coverage cmake-ninja "$@"
}
cmn-clean() {
  CMAKE_BUILD_CLEAN=1 cmake-ninja "$@"
}

num-cpus() {
  sysctl -n machdep.cpu.core_count
}

xcodebuild-default() {
  time xcodebuild -jobs 4 "$@"
}

xcodebuild-workspace-target() {
  xcodebuild-default -workspace "$1" -target "$2"
}

xcodebuild-target() {
  xcodebuild-default -target "$1"
}

cmake-xcode-refresh() {
  cmake .. -G Xcode
}
alias cmxrefresh=cmake-xcode-refresh

cmake-xcode-cpp11-refresh() {
  cmake .. -G Xcode -DUSE_C++11=ON
}

replace-perl() {
  glob=$1
  str=$2
  repl=$3
  if [ "$glob" == "" ] || [ "$str" == "" ] || [ "$repl" == "" ]; then
    echo "usage: replace-perl <file-pattern> <search> <replace>"
    return 1
  fi
  perl -p -i -e "s/$str/$repl/g" "$glob"
}

rewrite-git-email-history() {
  from=$1
  to=$2
  git filter-branch --env-filter "
    if [ \$GIT_AUTHOR_EMAIL == '$from' ]; then
      GIT_AUTHOR_EMAIL=$to;
    fi;
    export GIT_AUTHOR_EMAIL
  "
}

scp-keys-to-remote() {
  host=$1
  if [ "$host" == "" ]; then
    echo "scp-keys-to-remote <host>"
    return 1
  fi
  scp .ssh/id_rsa* "$host:.ssh/" && ssh "$host" 'chmod 600 .ssh/id_rsa*'
  return 0
}

open-with-intellij() {
  local target="${1:-pom.xml}"
  open -a 'IntelliJ IDEA Community' "$target"
}

open-pom() {
  open-with-intellij "$@"
}

open-sbt() {
  open-with-intellij "build.sbt"
}

# Pretty-prints any json file, supports stripping /* multiline comments */
json-pretty() {
  local file="${1:-/dev/stdin}"
  node -e 'var fs=require("fs");console.log(JSON.stringify(JSON.parse(fs.readFileSync(process.argv[1], {"encoding": "utf8"}).replace(/\/\*[\s\S]*?\*\//gm, "")), null, 2));' "$file"
}

git-to-epub () {
  local author="${1:Unknown}"
  local title=""
  if [[ -z "$2" ]]; then
    title=$(git remote -v | head -n 1 | cut -f1 -d' ' | grep -o '[a-z\-\.]\+\.git' | sed 's/\.git//')
    if [[ -z "$title" ]]; then
      title=Unknown
    fi
  fi
  local i=0
  {
    echo "---"
    echo "title: $title"
    echo "author: $author"
    echo "language: en-US"
    echo "..."
  } > ~/.pandoc.txt
  local files
  declare -a files
  if [[ -f "README.md" ]] ; then
    files+=(README.md)
  fi
  pandoc -S -o "$title.epub" ~/.pandoc.txt "${files[@]}"
}


alias gvim='/Applications/MacVim.app/Contents/MacOS/Vim -g'
alias subl='open -a "Sublime Text" '
alias trans-swedish='trans -s sv '

alias say-swedish='say -vAlva '
say-multi-swede () {
  say -v Alva "$1"
  say -v Klara "$1"
  say -v Oskar "$1"
}

super-swede () {
  {
    say-multi-swede "$1" &>/dev/null
  } &
  disown
  trans-swedish "$1"
}

alias profile="vim ~/.profile"
vimprofile () {
  vim ~/.vimrc
}


session() {
  local name="$1"
  local wd="$2"
  if [[ -z "$wd" ]]; then
    if [[ -d "$HOME/dev/$name" ]]; then
      wd="$HOME/dev/$name"
    else
      wd="."
    fi
  fi
  if cd "$wd"; then
    tmux attach -t "$name" || tmux new -s "$name" /usr/local/bin/bash
  fi
}

complete-command session "ls ~/dev"

alias print-clang-stdlib="echo | clang -std=c++11 -stdlib=libc++ -v -E -x c++ -"
gen-lvimrc() {
  find . -type d -name include -and -not -path ./build\* -exec echo set path+=\{\} \; > .lvimrc
}

alias firefox="/Applications/Firefox.app/Contents/MacOS/firefox-bin -p"

alias review-screenshots="open ~/Desktop/Screen\ Shot*"

p12-to-pem() {
  # Decrypt a P12 key into a PEM file
  local p12file="$1"
  local pass="${2:-notasecret}"
  local pemfile="${3:-$p12file.pem}"
  echo "performing openssl pkcs12 on $p12file -> $pemfile"
  openssl pkcs12 -in "$p12file" -passin "pass:$pass" -nodes -out "$pemfile"
}

install-ffmpeg() {
  brew install ffmpeg --with-fdk-aac --with-ffplay --with-freetype --with-libass --with-libquvi --with-libvorbis --with-libvpx --with-opus --with-x265
}

install-npm-if-ne() {
  if ! type "$1" &>/dev/null; then
    npm install -g "$1"
  fi
}

install-npm-tools() {
  install-npm-if-ne json
  install-npm-if-ne grunt
  install-npm-if-ne gulp
}

install-brew-if-ne() {
  if ! type "$1" &>/dev/null; then
    brew install "${2:-$1}"
  fi
}

if-not-exist-then() {
  if ! type "$1" &>/dev/null; then
    shift
    eval "$@"
  fi
}

install-brew-tools() {
  if ! type brew &>/dev/null; then
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
  install-brew-if-ne ag the_silver_searcher
  install-brew-if-ne jq
  install-brew-if-ne node
  install-brew-if-ne avprobe libav
  install-brew-if-ne identify imagemagick
  if-not-exist-then ffmpeg install-ffmpeg
}

bootstrap() {
  if [ "$(uname)" == 'Darwin' ]; then
    install-brew-tools
  fi
  if type node &>/dev/null; then
    install-npm-tools
  fi
}

defaults-domains () {
  local search=${1:-com.apple}
  defaults domains | grep -o "$search[^\\ ,]*" --color=no
}

calibre-debug () {
  mkdir -p ~/log/calibre
  /Applications/calibre.app/Contents/calibre-debug.app/Contents/MacOS/calibre -g &>"log/calibre/$(dtms).log"
}
alias ebook-convert='/Applications/calibre.app/Contents/MacOS/ebook-convert'

hex2dec() {
  node -e "console.log(parseInt(\"$1\", 16));"
}

convert-to-gif() {
  local file="$1"
  if [[ -z "$file" ]]; then
    echo "usage: convert-to-gif <file> [<output>]" >&2
    return 1
  fi
  local fgif="${file}.gif"
  local output="${2:-$fgif}"
  ffmpeg -i "$file" -s 800:600 -pix_fmt rgb24 -r 16 -f gif - | gifsicle --optimize=3 --delay=3 > "$output"
}

convert-to-gif-using-palette() {
  local file="$1"
  if [[ -z "$file" ]]; then
    echo "usage: convert-to-gif-using-palette <file> [<output>]" >&2
    return 1
  fi
  local fgif="${file}.gif"
  local output="${2:-$fgif}"

  local palette="/tmp/palette.png"
  local filters="fps=15,scale=640:-1:flags=lanczos"

  ffmpeg -i "$file" -vf "$filters,palettegen" -y $palette
  ffmpeg -i "$file" -i $palette -lavfi "$filters [x]; [x][1:v] paletteuse" -y "$output"
}

lint-looper() {
  local num_lines="${1:-50}"
  local sleep_s="${2:-5}"
  while true; do
    gulp lint | grep -v 'EPIPE' | grep -v 'Using gulpfile' | grep -v "Starting 'lint" > lint-results.txt;
    clear
    tail -n 1 < lint-results.txt
    head -n "$num_lines" < lint-results.txt
    sleep "$sleep_s"
  done
}

find-replace() {
  local find="$1"
  local repl="$2"
  if [ -z "$repl" ]; then
    echo "usage: find-replace <find> <replace>" >&2
    return 1
  fi
  find . -type f -exec sed -i "s/$find/$repl/g" \{\} \;
}

bump-submodule() {
  local path="$1"
  local wd
  local name
  wd=$(pwd)
  [ -z "$path" ] && return
  name=$(basename "$path")
  git checkout -b "bump-$name" || return
  cd "$path" || return
  local orig
  orig=$(git rev-list HEAD -1)
  git checkout master || return
  pull || return
  local new
  new=$(git rev-list HEAD -1)
  if [ "$new" == "$orig" ]; then
    echo "No changes to submodule: $path"
    cd "$wd" || return
    return
  fi
  git shortlog "${orig}..HEAD" --no-merge > "$wd/.submodule-bump-shortlog"
  cd "$wd" || return
  git add "$path"
  git commit -t '.submodule-bump-shortlog'
}

host-cert-info() {
  local host="$1"
  local port="${2:-443}"
  echo | openssl s_client \
    -showcerts \
    -servername "$host" \
    -connect "$host:$port" \
    2>/dev/null \
    | openssl x509 -inform pem -noout -text
}

checkglob() {
  if compgen -G "$1" >/dev/null; then
    return 0
  fi
  return 1
}

venv() {
  if [ ! -d '.venv' ]; then
    virtualenv .venv
  fi
  . .venv/bin/activate
  if checkglob "*requirements*.txt"; then
    for req in *requirements*.txt; do
      pip install -r "$req" | grep -v 'Requirement already satisfied'
    done
  fi
  export PATH=".venv/bin:$PATH"
}

retmux() {
  tmux attach -t0 || tmux
}

sourceif() {
  [ -f "$1" ] && source "$1"
}

yamlcheck() {
  file="$1"
  ruby -e "require 'yaml'; require 'json'; puts JSON.generate(YAML.load_file('$file'))"
}

sourceif "$HOME/.profile.spotify"
sourceif "$HOME/.profile.local"

# added by Anaconda3 5.1.0 installer
# export PATH="/anaconda3/bin:$PATH"
# source activate py27

if command -v reattach-to-user-namespace &>/dev/null; then
  alias open="reattach-to-user-namespace open "
fi

memcache-key-dump() {
  host=${1:-localhost}
  echo 'stats items'  | nc $host 11211  | grep -oe ':[0-9]*:' | grep -o \\d\\+ | sort | uniq | xargs -L1 -I{} bash -c "echo 'stats cachedump {} 1000' | nc $host 11211"
}

swagger-editor() {
  port=${1:-8080}
  docker run -d -p $port:8080 swaggerapi/swagger-editor:3.6.2
}

export PATH="$HOME/.cargo/bin:$PATH"

bq-hours-for-date() {
  local date=${1}
  if [ -z "$date" ]; then
    echo "usage: bq-hours-for-date <yyyymmdd>" >&1
    return 1
  fi
  seq -f%f ${date}01 ${date}23 | cut -d. -f1
}
